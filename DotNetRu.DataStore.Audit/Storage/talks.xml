<Talks>
<Talk>
  <Id>Advanced-use-of-NuGet-and-MSBuild</Id>
  <SpeakerIds>
    <SpeakerId>Igor-Labutin</SpeakerId>
  </SpeakerIds>
  <Title>Продвинутое использование NuGet и MSBuild</Title>
  <Description>NuGet пакеты используют все. А рано или поздно приходится собрать такой пакет самому. Хорошо если это просто несколько DLL собранных вместе. Встречаются и более сложные случаи — несколько целевых версий фреймворка, специальные скрипты установки и вдобавок расширения MSBuild. Если вы разработчик библиотеки, публикуемой на nuget.org, или вы просто захотели поделиться чем-то полезным с коллегами, выложив ваш пакет на внутренний NuGet-сервер — вам нужно владеть навыками создания NuGet пакетов и помнить о тонкостях которые могут вас подстерегать. В докладе рассмотрим полный цикл создания NuGet пакета и особое внимание уделим «продвинутым» возможностям — скриптам и встраивание в MSBuild.</Description>
  <SlidesUrl>https://www.slideshare.net/SpbDotNet/nuget-msbuild</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=GddbhA0gsdg</VideoUrl>
</Talk>
<Talk>
  <Id>Automatic-Input-Output-Matching</Id>
  <SpeakerIds>
    <SpeakerId>Dmitri-Nesteruk</SpeakerId>
  </SpeakerIds>
  <Title>Automatic Input/Output Matching in .NET</Title>
  <Description>Наверное, многие из вас сталкивались с задачей, когда нужно преобразовать один набор данных в другой, но вы понятия не имеете, какой магический обряд нужно провести чтобы звезды сложились и на выходе было именно то, что нужно. Вместо того чтобы итеративно лезть на StackOverflow и пробовать разные варианты для достижения нужной цели, Дмитрий предлагает другой вариант: использовать reflection для автоматизированного поиска нужной цепочки вызовов на основе входных и выходных данных. В этом докладе он покажет проект CallSharp который реализует как раз этот подход для вывода правильных цепочек. Мы поговорим про reflection, подводные камни произвольных вызовов всего и вся, а также возможные оптимизации и пути развития проекта.</Description>
  <SlidesUrl>http://www.slideshare.net/DmitriNesteruk/callsharp-automatic-inputoutput-matching-in-net</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=sriXY5HErxA</VideoUrl>
</Talk>
<Talk>
  <Id>Brave-CoreCLR</Id>
  <SpeakerIds>
    <SpeakerId>Sergey-Shchegrikovich</SpeakerId>
  </SpeakerIds>
  <Title>CoreCLR: Brave new world</Title>
  <Description>В докладе расскажу про свой опыт изучения CoreCLR. Какие техники сработали для меня, а какие нет. Покажу как делать debugging для CoreCLR, SOS и Finalizer'а.</Description>
</Talk>
<Talk>
  <Id>Common-mistakes-in-Net-benchmarks</Id>
  <SpeakerIds>
    <SpeakerId>Andrey-Akinshin</SpeakerId>
  </SpeakerIds>
  <Title>Распространённые ошибки оценки производительности .NET-приложений</Title>
  <Description>Изо дня в день многие .NET-разработчики сталкиваются с проблемами производительности в своих проектах. Для их решения необходимо уметь корректно замерять время, чтобы иметь возможность сравнить эффективность разных подходов. Если речь идёт о минутах или часах, то такие замеры можно выполнять «на глаз». Если речь идёт о секундах, то с задачей хорошо справится ваш любимый профайлер. Но если речь идёт о миллисекундах, микросекундах или даже наносекундах, то у вас могут возникнуть проблемы. Замеры коротких промежутков времени — очень сложная задача, многие программисты не умеют решать её правильно. В этом докладе я расскажу о наиболее распространённых ошибках и о том, как их можно избежать.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/net-55421533</SlidesUrl>
  <VideoUrl>http://www.youtube.com/watch?v=RL21wPsiy3o</VideoUrl>
</Talk>
<Talk>
  <Id>Concurrency-and-distributed-computing-with-Akka</Id>
  <SpeakerIds>
    <SpeakerId>Nikita-Tsukanov</SpeakerId>
  </SpeakerIds>
  <Title>Параллелизм и распределённые вычисления на акторах с Akka.NET</Title>
  <Description>В современном мире уже нельзя писать код, который работает на одном компьютере на одном процессорном ядре и имеет монопольный доступ к данным. В своих приложениях мы обычно используем многопоточность для распараллеливания операций по ядрам и нескольким процессорам на сервере, а для взаимодействия между несколькими серверами различного рода RPC и REST протоколы. При этом использование данных инструментов влечёт за собой ряд трудноразрешимых проблем. Так, при написании многопоточного кода весьма проблематично безопасно и корректно организовать конкуррентный доступ к данным из разных потоков, избежать взаимных блокировок и ситуаций, когда по каким-то причинам два потока обращаются к одним и тем же данным, хотя этого при разработке системы не предполагалось. Классические же сценарии сетевого взаимодействия сильно страдают от того, что они либо не «прозрачны» при использовании и требуют дополнительной логики для преобразования запросов и ответов, либо скрывают за мнимой прозрачностью возможные подводные камни при сетевых ошибках или недоступности той стороны.
Главным же ограничением в использовании этих технологий является то, что для их внедрения необходимо существенным образом изменять имеющийся код. Вы не можете быстро «потушить» проблему, просто залив её дополнительными вычислительными мощностями, уходят часы, дни, недели на доработки кода. Акторная модель призвана избавить разработчика от мыслей о том, в каком потоке и на каком сервере выполняется код. Замена синхронных вызовов на обрабатываемые по одному синхронные сообщения позволяет писать код, одинаково хорошо работающий как в одном потоке, так и на сервере с несколькими процессорами, а механизм обеспечения сетевой прозрачности позволяет не видеть разницы между актором, запущенным локально и удалённо.
Доклад рассчитан на неподготовленного слушателя, ранее не имевшего дело с акторами, и является улучшенной и дополненной версией доклада с питерского DotNext. Речь пойдёт непосредственно об акторной модели и её реализации в Akka.NET, особенностях юнит-тестирования, акторах с сохраняемым состоянием, а так же об интеграции всей этой машинерии с имеющимся приложением и ASP.NET.</Description>
  <SlidesUrl>https://www.slideshare.net/yuliafast/akkanet-65045789</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=dYwFLiBhTQk</VideoUrl>
</Talk>
<Talk>
  <Id>CORS-in-ASP</Id>
  <SpeakerIds>
    <SpeakerId>Mikhail-Bashurov</SpeakerId>
  </SpeakerIds>
  <Title>Особенности CORS в ASP.NET и не только</Title>
  <Description>В современном мире микро и макросервисов фронтенд часто отделяется от бэкенда физически и возникает проблема настройки кросс-доменных запросов. Это краткий рассказ о принципах работы и некоторых подводных камнях.</Description>
</Talk>
<Talk>
  <Id>Data-grid</Id>
  <SpeakerIds>
    <SpeakerId>Yakov-Zhdanov</SpeakerId>
  </SpeakerIds>
  <Title>Знакомство с In-Memory Data Grid</Title>
  <Description>В этой части встречи мы рассмотрим основные понятия и поговорим о важнейших возможностях Apache Ignite. Вместе со слушателями мы разберемся:

- как строится и функционирует кластер;
- какие API есть и что скрывается за вызовами;
- как распределяются данные в data grid;
- как обеспечивается отказоустойчиовость.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/inmemory-data-grid</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=3gvuy30tHp0</VideoUrl>
</Talk>
<Talk>
  <Id>Debugging-tools-in-Msvs-2015</Id>
  <SpeakerIds>
    <SpeakerId>Mikhail-Shcherbakov</SpeakerId>
  </SpeakerIds>
  <Title>Новые возможности диагностики и отладки в Visual Studio 2015</Title>
  <Description>Рассмотрим на примерах новые средства диагностики и профиляции кода в Visual Studio 2015, поговорим о том, что нового появилось в отладчике и что еще хотелось бы в нем видеть. Посмотрим на магический IntelliTest и разберемся что у него под капотом и как он «изучает код .NET»</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/visual-studio-2015-diagnostic-and-debugging-tools</SlidesUrl>
  <VideoUrl>http://www.youtube.com/watch?v=L_nDwDLXRuc</VideoUrl>
</Talk>
<Talk>
  <Id>Delegates-and-Events</Id>
  <SpeakerIds>
    <SpeakerId>Mikhail-Shcherbakov</SpeakerId>
  </SpeakerIds>
  <Title>Что может быть проще: делегаты и события</Title>
  <Description>Ждём...</Description>
</Talk>
<Talk>
  <Id>Design-of-RESTFul-API</Id>
  <SpeakerIds>
    <SpeakerId>Vyacheslav-Mikhaylov</SpeakerId>
  </SpeakerIds>
  <Title>Подходы к проектированию RESTFul API</Title>
  <Description>Ни один современный продукт не обходится без API. Этот API может быть внешним, для публичного использования, а может быть сугобо внутренним, но требования к созданию расширяемого, версионируемого, тестируемого, документированного программного интерфейса очень похожи. На этой встрече мы поговорим о том, как создавать подобные API, какие существуют best-practices, чего следует избегать, на что обращать внимание при проектировании.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/restful-api-best-practices-versioning-design-documentation</SlidesUrl>
  <VideoUrl>http://www.youtube.com/watch?v=SRHSIJKQnLQ</VideoUrl>
</Talk>
<Talk>
  <Id>Design-Pattern-Observations</Id>
  <SpeakerIds>
    <SpeakerId>Dmitri-Nesteruk</SpeakerId>
  </SpeakerIds>
  <Title>Интересные подходы в реализации паттернов проектирования в C#</Title>
  <Description>Паттерны возможно уже не вызывают тот ажиотаж что раньше, но это потому, что все их знают. Тем не менее, есть интересные подходы к реализации паттернов на C#, и в этом докладе Дмитрий расскажет как фичи языка (extension method-ы, динамики, и т.п.) помогают реализовать некоторые из них. Доклад сделан по мотивам его курса по паттернам проектирования на Udemy.</Description>
  <SlidesUrl>https://www.slideshare.net/DmitriNesteruk/design-pattern-observations</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=bFZ9ytZnVmQ</VideoUrl>
</Talk>
<Talk>
  <Id>DotaNetoLogia-SPb-2017</Id>
  <SpeakerIds>
    <SpeakerId>Anatoly-Kulakov</SpeakerId>
  </SpeakerIds>
  <Title>ДотаНетоЛогия: СПб 2017</Title>
  <Description>Мир .NET сейчас развивается с космической скоростью. Каждый день возникают сотни новых проектов, лекций, личностей. Не удивительно, что большинству разработчиков очень сложно уследить за всеми новостями и идеями. Поэтому в данном докладе Анатолий соберёт для вас список лучших авторов мирового уровня, которые будут выступать на конференции DotNext Spb 2017. Для того что бы подробно рассмотреть какую активность они ведут, про что пишут в своих блогах, и действительно ли компетентны для того чтобы представлять выбранные темы на самой большой в России .NET конференции.</Description>
  <SlidesUrl>https://www.slideshare.net/SpbDotNet/2017-76067178</SlidesUrl>
</Talk>
<Talk>
  <Id>DotNet-and-Java</Id>
  <SpeakerIds>
    <SpeakerId>Vladimir-Ozerov</SpeakerId>
  </SpeakerIds>
  <Title>Заклятые друзья или как подружить .NET и Java</Title>
  <Description>Как заставить Apache Ignite работать на .NET? Построчно спортировать с Java? Все 500 тысяч строк? Мы пошли другим путем, решив переиспользовать существующую Java-логику прямо внутри .NET процесса. В докладе я расскажу, почему мы приняли такое решение, как мы это сделали, и с какими трудностями столкнулись.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/apache-ignite-net</SlidesUrl>
</Talk>
<Talk>
  <Id>DSL-unexpurgated</Id>
  <SpeakerIds>
    <SpeakerId>Nikita-Kozlov</SpeakerId>
  </SpeakerIds>
  <Title>DSL без купюр</Title>
  <Description>Три буквы, о которых многие слышали, кто-то видел, но при начальстве их не все решаются произносить. Предлагаю поговорить о DSL: domain specific language. Постараемся выяснить, как оценить все "за" и "против", и есть ли смысл придумывать свой язык. Я поделюсь личным опытом реализации DSL на основе C# + ANTLR и подводными камнями, с которыми пришлось столкнуться. Обсудим "удобную" архитектуру транслятора и пути реализации инструментов разработки языка.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/dsl-49157368</SlidesUrl>
</Talk>
<Talk>
  <Id>Dynamic-Prototyping</Id>
  <SpeakerIds>
    <SpeakerId>Dmitri-Nesteruk</SpeakerId>
  </SpeakerIds>
  <Title>Динамическое Прототипирование</Title>
  <Description>Чем отличается автосервис от кардиологии? Тем что кардиолог чинит работающий движок. Динамическое прототипирование позволяет, при правильном планировании архитектуры, изменять реализации классов прямо в работающей программе. В этом докладе мы посмотрим на то как этот механизм реализован и как можно проектировать приложения так, чтобы получать максимум пользы от этого подхода.</Description>
</Talk>
<Talk>
  <Id>EF-chips-and-pitfalls</Id>
  <SpeakerIds>
    <SpeakerId>Mikhail-Bashurov</SpeakerId>
  </SpeakerIds>
  <Title>Entity Framework: фишки и подводные камни</Title>
  <Description>У каждого инструмента своя кривая обучения. Entity Framework в этом плане не исключение, с ним легко начать, но затем постепенно начинаешь спотыкаться. Михаил расскажет что может помочь человеку начинающему знакомиться с EF или желающему немного прокачать знания по нему. Будет много практического опыта, накопившегося за пару-тройку лет общения с ним.</Description>
  <SlidesUrl>https://www.slideshare.net/SpbDotNet/entity-framework-75868404</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=Y3M826ZySDM</VideoUrl>
</Talk>
<Talk>
  <Id>EF-Core-Internals</Id>
  <SpeakerIds>
    <SpeakerId>Andrey-Terekhov</SpeakerId>
  </SpeakerIds>
  <Title>Внутреннее устройство EF Core</Title>
  <Description>Рассмотрим внутреннюю архитектуру нового EF. Посмотрим как теперь работают основные его фичи внутри. Начнем с инструментов разработчика и CLI, а закончим генерацией provider специфичных запросов. Посмотрим на точки расширения для новых провайдеров, а так же рассмотрим гипотетические возможности по написанию своего.</Description>
  <SlidesUrl>https://www.slideshare.net/SpbDotNet/ef-core-74186664</SlidesUrl>
</Talk>
<Talk>
  <Id>Experience-and-prospects-of-F</Id>
  <SpeakerIds>
    <SpeakerId>Dmitri-Nesteruk</SpeakerId>
  </SpeakerIds>
  <Title>F#: Опыт и Перспективы</Title>
  <Description>Рассказ про то зачем нужен F#, его текущее положение в индустрии, а также примеры того, как его использовать для разных целей, в т.ч. в математике, для построения DSLей, написания парсеров/трансляторов и использование REPL-среды для ускорения разработки.</Description>
  <SlidesUrl>http://www.slideshare.net/SpbDotNet/f-66275448</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=a4fD2Nl7R0A</VideoUrl>
</Talk>
<Talk>
  <Id>F-Battle</Id>
  <SpeakerIds>
    <SpeakerId>Roman-Nevolin</SpeakerId>
    <SpeakerId>Dmitri-Nesteruk</SpeakerId>
  </SpeakerIds>
  <Title>F# Battle: За и Против</Title>
  <Description>Роман Неволин и Дмитрий Нестерук обсуждают F#</Description>
  <VideoUrl>https://www.youtube.com/watch?v=67-gi3Rj0kE</VideoUrl>
</Talk>
<Talk>
  <Id>Functional-NET</Id>
  <SpeakerIds>
    <SpeakerId>Roman-Nevolin</SpeakerId>
  </SpeakerIds>
  <Title>Функциональный .NET</Title>
  <Description>Пожалуй, уже не осталось .NET разработчиков, не слышавших об F#. Но далеко не каждый понимает, что это за язык и зачем рядовому разработчику «эта ваша функциональщина». Самое время это исправить! Мы поговорим как о роли и преимуществах функционального программирования в целом, так и о его использовании в языке F#. Посмотрим на кейсы применения функционального подхода и разберем, как ФП позволяет «проапрегрейдить» ваш код.</Description>
  <SlidesUrl>http://www.slideshare.net/ssuser939466/net-66162198</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=Y7i3fJrZyr8</VideoUrl>
</Talk>
<Talk>
  <Id>Functional-tricks-for-OO-code</Id>
  <SpeakerIds>
    <SpeakerId>Roman-Nevolin</SpeakerId>
  </SpeakerIds>
  <Title>Функциональные трюки для вашего объектно-ориентированного кода</Title>
  <Description>Вы наверняка частенько слышите о том, какая же это чудесная штука - функциональное программирование. Все эти статьи и доклады про великолепие F#, Haskell, Scala и других функциональных языков на каждом шагу... Вот только в продакшене их все не видно.
Но вы же не думаете, что функциональное программирование - это только вышеперечисленные языки? Пусть этот блиц-доклад окончательно убедит вас в обратном, показав множество прекрасных идей из функционального мира, которые можно использовать в любом современном языке - например C#.</Description>
  <SlidesUrl>https://www.slideshare.net/SpbDotNet/ss-75966736</SlidesUrl>
</Talk>
<Talk>
  <Id>Future-of-Net-development</Id>
  <SpeakerIds>
    <SpeakerId>Andrey-Akinshin</SpeakerId>
  </SpeakerIds>
  <Title>Будущее .NET-разработки</Title>
  <Description>За последнее время Microsoft совершил революцию в .NET-мире: этот славный мир теперь кросс-платформенный, а его код превратился в сплошной open source. Появилось великое множество новых инструментов, библиотек и подходов, которые вскоре сделают жизнь .NET-разработчиков сплошным наслаждением. В этом докладе мы поговорим о будущем платформы и о том, как важно оставаться на волне новых технологий и следить за инновациями.</Description>
</Talk>
<Talk>
  <Id>GC-Tips</Id>
  <SpeakerIds>
    <SpeakerId>Sasha-Goldshtein</SpeakerId>
  </SpeakerIds>
  <Title>.NET Garbage Collection Performance Tips</Title>
  <Description>The .NET garbage collector is probably the most complex part of the CLR. Did you know gc.cpp in the CoreCLR open source project is a 1.2MB source file with over 37,000 lines of code? There are a lot of partial truths and myths about the GC’s behavior and its performance characteristics. In this talk we will unveil some of this complexity and discuss tips for application developers that can improve garbage collection performance by an order of magnitude, as well as tools for measuring this impact. We will briefly touch on object layout, allocation rates, finalization, VM fragmentation, and some other topics.</Description>
</Talk>
<Talk>
  <Id>Good-Ideas-in-Programming-Languages</Id>
  <SpeakerIds>
    <SpeakerId>Dmitri-Nesteruk</SpeakerId>
  </SpeakerIds>
  <Title>Хорошие идеи в современных языках программирования</Title>
  <Description>Прогресс не стоит на месте: старые языки вроде C# продолжают развиваться, а новые, такие как Rust и Kotlin изобилируют смелыми идеями. В этом докладе мы поговорим, о том какие же фичи современных языков являются самыми полезными и интересными, а также немного потеоретизируем на тему того, какие еще известные, но пока не реализованные, фичи были бы полезны в современных языках программирования.</Description>
  <SlidesUrl>https://www.slideshare.net/DmitriNesteruk/good-ideas-in-programming-languages</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=WTiRddnYD9E</VideoUrl>
</Talk>
<Talk>
  <Id>How-it-works-DLR</Id>
  <SpeakerIds>
    <SpeakerId>Igor-Yakovlev</SpeakerId>
  </SpeakerIds>
  <Title>Как это работает: DLR</Title>
  <Description>С версии C# 4.0 появилась возможность использовать динамическую типизацию. Для этого, в платформу .NET была добавлена инфраструктура, позволяющая работать с объектами, тип которых не известен на этапе компиляции. Эта инфраструктура, при поддержке компиляторов и интерпретаторов, позволила обеспечить взаимодействие различных миров: статического и динамического, причем совершенно прозрачно для программиста. К сожалению, данная тема (особенно в русскоязычном сегменте интернет), раскрыта очень поверхностно. В докладе мы рассмотрим устройство динамической типизации платформы .NET с точки зрения C# и подсистемы DLR.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/dlr-54012646</SlidesUrl>
  <VideoUrl>http://www.youtube.com/watch?v=XLiw5evR6h8</VideoUrl>
</Talk>
<Talk>
  <Id>Ignite-in-action</Id>
  <SpeakerIds>
    <SpeakerId>Pavel-Tupitsin</SpeakerId>
  </SpeakerIds>
  <Title>Apache Ignite.NET в действии</Title>
  <Description>Вместе со зрителями мы с чистого листа будем писать код, запускать кластер из разнородных машин и операционных систем, показывать, как машины в кластере обмениваются данными и запускают вычисления, попутно объясняя, что происходит «под капотом». В программе: работа с данными в кэше и детали работы сериализации; SQL и LINQ запросы и их внутренности; map-reduce вычисления и запуск пользовательского кода на удалённых машинах.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/apache-ignitenet</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=V2847lMqObw</VideoUrl>
</Talk>
<Talk>
  <Id>In-search-of-paradigm</Id>
  <SpeakerIds>
    <SpeakerId>Roman-Nevolin</SpeakerId>
  </SpeakerIds>
  <Title>В поисках парадигмы</Title>
  <Description>Роман делится своим опытом разработки на различных языках и неистово тролит парадигмы, программистов и программирование вообще.</Description>
  <SlidesUrl>http://www.slideshare.net/SpbDotNet/ss-70034346</SlidesUrl>
</Talk>
<Talk>
  <Id>Lack-of-CPlusPlus-in-CSharp-1</Id>
  <SpeakerIds>
    <SpeakerId>Sergey-Baltiyskiy</SpeakerId>
  </SpeakerIds>
  <Title>Когда в C# не хватает C++ (часть 1 из 3)</Title>
  <Description>На дотнете удобно писать программы, но иногда результат работает слишком медленно, а GC начинает пробуксовывать под нагрузкой. Кажется, что блага managed-цивилизации даются слишком большой ценой, и хочется от них отказаться — но только локально! Бывает и так, что часть программы уже написана, и вовсе не на дотнете. Насколько легко подружить эти два мира? Чего можно добиться, не выходя из уютного C#? Опасен ли unsafe keyword? Означает ли COM работу с реестром? Для чего годится С++/CLI? Поговорим об этом!</Description>
  <SeeAlsoTalkIds>
    <TalkId>Lack-of-CPlusPlus-in-CSharp-2</TalkId>
    <TalkId>Lack-of-CPlusPlus-in-CSharp-3</TalkId>
  </SeeAlsoTalkIds>
  <SlidesUrl>http://www.slideshare.net/yu5k3/c-c-54012854</SlidesUrl>
  <VideoUrl>http://www.youtube.com/watch?v=qvE3HTajoqc</VideoUrl>
</Talk>
<Talk>
  <Id>Lack-of-CPlusPlus-in-CSharp-2</Id>
  <SpeakerIds>
    <SpeakerId>Sergey-Baltiyskiy</SpeakerId>
  </SpeakerIds>
  <Title>Когда в C# не хватает C++ (часть 2 из 3)</Title>
  <Description>Вторая часть рассказа о том, как привлечь силы native code и native memory в дотнет. В первой части мы говорили о C++/CLI и о тесной дружбе managed runtime с COM. Вернёмся к тому, что умеет сам язык C#: PInvoke и C-style pointers. В чём это проще, а в чём хитрее; почему это универсальнее; какой код на самом деле unsafe; и как построить сложную unmanaged структуру данных, не выходя из C#.</Description>
  <SeeAlsoTalkIds>
    <TalkId>Lack-of-CPlusPlus-in-CSharp-1</TalkId>
    <TalkId>Lack-of-CPlusPlus-in-CSharp-3</TalkId>
  </SeeAlsoTalkIds>
  <SlidesUrl>http://www.slideshare.net/yu5k3/c-c-2-56315220</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=yjrmG0O5D9E</VideoUrl>
</Talk>
<Talk>
  <Id>Lack-of-CPlusPlus-in-CSharp-3</Id>
  <SpeakerIds>
    <SpeakerId>Sergey-Baltiyskiy</SpeakerId>
  </SpeakerIds>
  <Title>Когда в C# не хватает C++ (часть 3 из 3)</Title>
  <Description>Пора заканчивать эту длинную беседу о работе с native memory &amp; native code в дотнете. С нативным кодом мы разобрались (и там было много печальных вещей), на приёмы работы с памятью напрямую из C# посмотрели (тут всё гораздо лучше, но есть нюансы). Пришло время собрать из этого большую структуру данных, быстро прочитать её с диска, нарисовать к ней приличное managed API и не нагрузить GC при работе — рассказ основан на реальных событиях из жизни ReSharper 10.</Description>
  <SeeAlsoTalkIds>
    <TalkId>Lack-of-CPlusPlus-in-CSharp-1</TalkId>
    <TalkId>Lack-of-CPlusPlus-in-CSharp-2</TalkId>
  </SeeAlsoTalkIds>
  <SlidesUrl>http://www.slideshare.net/yu5k3/c-c-3-60617635</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=kaEjNBsRnNA</VideoUrl>
</Talk>
<Talk>
  <Id>Machine-learning</Id>
  <SpeakerIds>
    <SpeakerId>Roman-Nevolin</SpeakerId>
  </SpeakerIds>
  <Title>Машинное обучение на платформе .NET</Title>
  <Description>Большинство разработчиков не задумываются о .NET как об инструменте для работы с машинным обучением. Что же, пришло время ответить на вопрос, есть ли место для машинного обучения в холодном мире дотнета, и увидеть, куда нас заведет скользкая функциональная дорожка.</Description>
  <CodeUrl>https://github.com/nevoroman/ml-dotnet/</CodeUrl>
  <SlidesUrl>http://www.slideshare.net/ssuser939466/net-60406933</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=rmkbb2MutOo</VideoUrl>
</Talk>
<Talk>
  <Id>Memory-Model</Id>
  <SpeakerIds>
    <SpeakerId>Valery-Petrov</SpeakerId>
  </SpeakerIds>
  <Title>Модель памяти .NET</Title>
  <Description>Современный .NET становится по-настоящему кросс-платформенным, Microsoft купила Xamarin, современные платформы многоядерные, а порог вхождения в разработку на C# весьма низкий. Также почему-то в мире .NET не сложилось практики чтения спецификаций (их заменяют видоизменённые цитаты весьма авторитетных специалистов, вырванные из контекста), что может привести к печальным последствиям.</Description>
  <CodeUrl>https://github.com/m08pvv/MemoryModelDemos</CodeUrl>
  <SlidesUrl>http://www.slideshare.net/SpbDotNet/net-72058691</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=m9_aBxdKrRI</VideoUrl>
</Talk>
<Talk>
  <Id>Modern-static-analyzers</Id>
  <SpeakerIds>
    <SpeakerId>Vladimir-Koshelev</SpeakerId>
  </SpeakerIds>
  <Title>На что способны современные статические анализаторы для C#</Title>
  <Description>При разработке на C# все мы используем статический анализ. Стандартные предупреждения Visual Studio, FxCop, Visual Studio Code Analysis, ReSharper и не только. Однако, многие относятся к статическому анализу как к черному ящику, выдающему непредсказуемые и нередко ложные результаты. Мы поговорим о типичных ситуациях, которые обнаруживают статические анализаторы, и о принципиальных проблемах, приводящих к ложным срабатываниям. Обсудим основные идеи, позволяющие реализовать анализ, работающий за разумное время. В заключение мы расскажем об анализаторе, который разрабатывается в ИСП РАН.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/c-60617888</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=6qu1k6xF3TI</VideoUrl>
</Talk>
<Talk>
  <Id>Multitasking-apps-on-NET</Id>
  <SpeakerIds>
    <SpeakerId>Dmitry-Ivanov</SpeakerId>
  </SpeakerIds>
  <Title>Итак, вы всё-таки решили писать многозадачные приложения на .NET</Title>
  <Description>Посмотрим с разных сторон на механизмы многозадачности в .Net: с высоты птичьего полёта, в исторической перспективе и изнутри. Разберёмся с эволюцией параллельного API в .Net, дойдём до современности и поймём, как писать State of The Art Task Based Async Code. Посмотрим, как правильно синхронизироваться между потоками? А как быстро это работает? А надо ли это вообще? Напишем Interlocked-структуру. Рассмотрим, какие инструменты нам помогут в разработке многопоточного приложения.</Description>
  <CodeUrl>https://github.com/yuske/ParallelDemo</CodeUrl>
  <SlidesUrl>http://www.slideshare.net/yu5k3/parallel-demo</SlidesUrl>
  <VideoUrl>http://www.youtube.com/watch?v=Ogb8PuoNL_c</VideoUrl>
</Talk>
<Talk>
  <Id>Net-Web-news</Id>
  <SpeakerIds>
    <SpeakerId>Anton-Shabanov</SpeakerId>
  </SpeakerIds>
  <Title>Обзор технологических новинок в .Net с точки зрения Web-программиста</Title>
  <Description>В докладе будет рассказано о технологических новинках в предстоящей версии .Net Framework в целом и ASP .Net 5 в частности. Уделим внимание новому резилу MVC, заявленной кроссплатформенности, отвязанности от IIS и конечно же о том, как этому всему способствует недавняя передача .Net в open-source и нынешние отношения между Microsoft и Mono. Мы так же увидим, что было привнесено в новую версию Visual Studio.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/aspnet5</SlidesUrl>
</Talk>
<Talk>
  <Id>OAuth-for-NET</Id>
  <SpeakerIds>
    <SpeakerId>Artem-Zhuravlev</SpeakerId>
  </SpeakerIds>
  <Title>OAuth для .NET</Title>
  <Description>Доклад про использование OAuth на платформе .NET</Description>
  <SlidesUrl>http://www.slideshare.net/SpbDotNet/oauth-net</SlidesUrl>
</Talk>
<Talk>
  <Id>Octopus-in-the-name-of-good</Id>
  <SpeakerIds>
    <SpeakerId>Anatoly-Kulakov</SpeakerId>
  </SpeakerIds>
  <Title>Octopus Deploy во имя добра</Title>
  <Description>Большинство .NET-разработчиков не заботятся о жизни продукта после успешного прохождения CI сервера. Но ведь это далеко не конец, следующий шаг не менее важен и сложен. Распространение продукта с учётом всех окружений, хостов и версий - именно об этом мы и поговорим. И нам поможет не сойти с ума замечательный инструмент Octopus Deploy. В ходе доклада Анатолий покажет как за 5 минут развернуть полноценную систему управления версиями и продемонстрирует базовые возможности по контролю жизненного цикла приложения.</Description>
  <SlidesUrl>http://www.slideshare.net/SpbDotNet/octopus-deploy</SlidesUrl>
</Talk>
<Talk>
  <Id>PowerShell-in-the-name-of-good</Id>
  <SpeakerIds>
    <SpeakerId>Anatoly-Kulakov</SpeakerId>
  </SpeakerIds>
  <Title>Windows PowerShell во имя добра</Title>
  <Description>Ровно 10 лет назад была выпущена первая версия революционного средства для автоматизации - PowerShell. С тех самых пор все системные администраторы Windows яростно и неистово боготворят это чудо инженерной мысли. За многие годы стремительного развития уже
не осталось преград, которые были бы не под силу новой командной строке Windows. И в этот юбилейный год мы соберёмся вместе, что бы пополнить число фанатов PowerShell новыми пользователями.

В докладе мы выясним, чем так примечательна эта командная строка. Какие задачи она призвана решать. Какие средства разработки и тестирования предлагает. Познакомимся с синтаксисом и командами, окружением и инструментами, точками расширения и отладки. Узнаем как автоматизировать скучные задачи и окончательно забыть про повседневную рутину.</Description>
  <SlidesUrl>http://www.slideshare.net/SpbDotNet/windows-powershell-65660441</SlidesUrl>
</Talk>
<Talk>
  <Id>Practice-of-AppSec-NET</Id>
  <SpeakerIds>
    <SpeakerId>Mikhail-Shcherbakov</SpeakerId>
  </SpeakerIds>
  <Title>Практика Application Security .NET</Title>
  <Description>В докладе будет рассмотрена практическая составляющая предметной области Application Security для .NET-разработчиков. Будут рассмотрены многочисленные примеры уязвимого кода, демонстрирующие недостатки, позволяющие атакующему нарушить защищенность системы с помощью различных типов атак: XSS, XXE, CSRF, Session Fixation, атак на уязвимости бизнес-логики и т.п. Посмотрим на ограниченность встроенных в .NET механизмов валидации запросов и данных.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/practice-of-appsec-net</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=EzLRTVV0qp8</VideoUrl>
</Talk>
<Talk>
  <Id>Practice-WCF</Id>
  <SpeakerIds>
    <SpeakerId>Igor-Labutin</SpeakerId>
  </SpeakerIds>
  <Title>WCF: Удобно или проблемно?</Title>
  <Description>Если возникает задача обеспечения обмена данными между приложениями на платформе .NET, то WCF прочно вошел в набор инструментов которые позволяют сделать это быстро и сравнительно легко. Действительно ли это легко или эта кажущаяся легкость скрывает огромное поле граблей/проблем которые трудно заметить? В докладе я расскажу об опыте использования WCF в разработке, а также о проблемах и их решениях которые нам встретились.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/wcf-60618162</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=_6MQ_TfrjBA</VideoUrl>
</Talk>
<Talk>
  <Id>Project-Rider</Id>
  <SpeakerIds>
    <SpeakerId>Sergey-Shkredov</SpeakerId>
  </SpeakerIds>
  <Title>Project Rider</Title>
  <Description>История про продукт, объединивший две мощные платформы для разработки — IntelliJ IDEA и ReSharper.

13 января 2016 года на NDC London мы презентовали широкой общественности наш новый продукт — кросс-платформенную IDE для разработки .NET приложений. В своей презентации я покажу как работает Rider, расскажу про продукт, что будет включать первая версия и что самое интересное — расскажу как мы сделали гибридное приложение, работающее одновременно на Java и .NET.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/project-rider</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=wq5qvizDUIM</VideoUrl>
</Talk>
<Talk>
  <Id>RESTFul-API-how-and-why</Id>
  <SpeakerIds>
    <SpeakerId>Yulia-Tsisyk</SpeakerId>
  </SpeakerIds>
  <Title>RESTFul API в вашем .NET приложении: как, зачем и почему?</Title>
  <Description>Ни один современный продукт не обходится без API. Этот API может быть внешним, для публичного использования, а может быть сугубо внутренним, но требования к созданию расширяемого, версионируемого, тестируемого, документированного программного интерфейса очень похоже. В этом докладе мы поговорим о том, как создавать подобные API на основе REST, какие существуют best-practices, чего следует избегать, на что обращать внимание при проектировании.</Description>
  <SlidesUrl>https://www.slideshare.net/yuliafast/restful-api-net</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=fRTlpFusCj4</VideoUrl>
</Talk>
<Talk>
  <Id>Review-of-CSharp-6</Id>
  <SpeakerIds>
    <SpeakerId>Dmitri-Nesteruk</SpeakerId>
  </SpeakerIds>
  <Title>Обзор C# 6</Title>
  <Description>В этом докладе мы посмотрим на некоторые фичи C#6</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/whats-new-in-c-6-52144075</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=cseN8coWvfo</VideoUrl>
</Talk>
<Talk>
  <Id>Review-of-FSharp-4</Id>
  <SpeakerIds>
    <SpeakerId>Dmitry-Vlasov</SpeakerId>
  </SpeakerIds>
  <Title>Обзор Visual F# 4.0</Title>
  <Description>В этом докладе мы посмотрим на новые возможности F# 4.0</Description>
  <VideoUrl>https://www.youtube.com/watch?v=iOItE4hR6jg</VideoUrl>
</Talk>
<Talk>
  <Id>Rider-Internals</Id>
  <SpeakerIds>
    <SpeakerId>Andrey-Akinshin</SpeakerId>
    <SpeakerId>Mikhail-Filippov</SpeakerId>
  </SpeakerIds>
  <Title>Rider: разговоры про внутренности и кроссплатформенность</Title>
  <Description>Наверное, многие из вас слышали, что в JetBrains разрабатывается новая крутая кроссплатформенная C# IDE под названием Rider. Под капотом у неё сразу два больших продукта: ReSharper (тысячи анализаторов кода, рефакторинги, навигация, генераторы кода и прочие ништяки) и IntelliJ IDEA (просто очень хорошая IDE). Обратите внимание: один продукт написан под CLR, а другой — под JVM. Их удалось заставить работать вместе, да ещё и хорошо работать. В этом докладе мы немного расскажем вам о внутренностях райдера: будут разные интересные технологические решения, а также весёлые байки про шайтан-баги и сложности современной разработки ПО. Отдельно поговорим про то, как же удалось запустить ReSharper (здоровый энтерпрайзный C#-продукт) на Linux и MacOS поверх Mono, и к чему нужно быть готовым .NET-разработчикам, которые внезапно решили писать кроссплатформенные программы.</Description>
  <SlidesUrl>http://www.slideshare.net/SpbDotNet/rider-69615139</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=Eb4ZgRQAaqI</VideoUrl>
</Talk>
<Talk>
  <Id>Roslyn-Code-Analysis</Id>
  <SpeakerIds>
    <SpeakerId>Anatoly-Kulakov</SpeakerId>
  </SpeakerIds>
  <Title>Roslyn Code Analysis</Title>
  <Description>Roslyn открывает возможности для появления множества интересных сервисов. Одним из таких сервисов является Code Analysis. Теперь, под старым названием, скрывается абсолютно новая переработанная концепция. Свежая платформа даёт возможность поднять качество кода на принципиально иной уровень. Революция затрагивает множество ролей от суровых сторожил и до начинающих кодировщиков, а также PM’щиков, DevOps’ов, авторов различных библиотек и их фанатов.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/roslyn-code-analysis</SlidesUrl>
  <VideoUrl>http://www.youtube.com/watch?v=RR2b2i8BSRc</VideoUrl>
</Talk>
<Talk>
  <Id>Roslyn-obvious</Id>
  <SpeakerIds>
    <SpeakerId>Alexander-Kugushev</SpeakerId>
  </SpeakerIds>
  <Title>Roslyn: очевидные неочевидности</Title>
  <Description>Разработка синтаксических анализаторов и рефакторингов с помощью Roslyn (Microsoft.CodeAnalysys) интересное и захватывющее занятие. Но путь изучения тернист, полон неожиданностей и неочевидностей. Давайте же рассмотрим основные сложности, которые вы можете встретить и составим шпаргалку, которая поможет вам в нелёгком деле синтаксического анализа.</Description>
</Talk>
<Talk>
  <Id>Round-table-code-analysis</Id>
  <SpeakerIds>
    <SpeakerId>Vladimir-Kochetkov</SpeakerId>
    <SpeakerId>Alexander-Shvedov</SpeakerId>
    <SpeakerId>Vladimir-Koshelev</SpeakerId>
    <SpeakerId>Valery-Ignatyev</SpeakerId>
    <SpeakerId>Artem-Borzilov</SpeakerId>
  </SpeakerIds>
  <Title>Круглый стол по вопросам анализа кода</Title>
  <Description>Ведущие эксперты, разрабатывающие продукты в области анализа кода, обсуждают эту тему.</Description>
</Talk>
<Talk>
  <Id>Round-table-multi-threading</Id>
  <SpeakerIds>
    <SpeakerId>Dmitry-Ivanov</SpeakerId>
    <SpeakerId>Dmitry-Naumov</SpeakerId>
  </SpeakerIds>
  <Title>Круглый стол по вопросам многопоточности</Title>
  <Description>Наши эксперты могут ответить на ваши вопросы, и мы все вместе сможем обсудить проблемы и особенности параллельного программирования.</Description>
</Talk>
<Talk>
  <Id>Sandboxing-in-Net-CLR</Id>
  <SpeakerIds>
    <SpeakerId>Mikhail-Shcherbakov</SpeakerId>
  </SpeakerIds>
  <Title>Sandboxing in .NET CLR</Title>
  <Description>Доклад для тех, кто разрабатывает или планирует разрабатывать чувствительные к безопасности приложения, задумывается над проектированием расширяемой плагинами системы. Или просто интересуется технологиями, на основе которых построена вся модель безопасности в .NET Framework.

Основные компоненты архитектуры безопасности .NET FW 4.0 и последующих версий. Особенности типобезопасности в .NET CLR. Домены приложений (AppDomain) и Code Access Security. Как, где и когда нужно строить собственные песочницы (sandbox) для выполнения недоверенного кода. Как все это работает в ASP.NET. Также мы вместе создадим эксплойт для .NET Framework, который продемонстрирует выход из песочницы, и разберем, за счет каких атак это возможно.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/sandboxing-in-net-clr-56315313</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=tyvquVdhWzA</VideoUrl>
</Talk>
<Talk>
  <Id>Simple-cross-platform-Web-server</Id>
  <SpeakerIds>
    <SpeakerId>Alexander-Ivanov</SpeakerId>
    <SpeakerId>Roman-Pavuk</SpeakerId>
  </SpeakerIds>
  <Title>Простой и кросс-платформенный Web-сервер на базе .Net Framework</Title>
  <Description>Релиз ASP.NET 5 уже совсем близко. Ключевыми элементами, которые определяют архитектуру последней версии ASP.NET стали переход на новый .NET runtime, который получил название .NET Core, и реализация стандарта OWIN в ASP.NET.
В докладе представлен обзор этих ключевых технологий. Речь пойдут о проблемах, с которыми сталкиваются разработчики WEB-приложений, и о том, как они решаются благодаря .NET Core и OWIN.

Также мы поделимся опытом использования стандарта OWIN в реальном, хоть и не большом, проекте. Использую реализацию OWIN, мы смогли реализовать простой и эффективный WEB-сервис, который легко разворачивается и поддерживается во время эксплуатации.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/web-net-56315595</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=PbdPSlGJp48</VideoUrl>
</Talk>
<Talk>
  <Id>SQL-Server-Performance-101</Id>
  <SpeakerIds>
    <SpeakerId>Alexander-Shelemin</SpeakerId>
  </SpeakerIds>
  <Title>SQL Server Performance 101</Title>
  <Description>Как бы нам ни хотелось верить в то, что оптимизатор запросов всегда сделает всё сам, на практике нередко возникают ситуации, когда для того, чтобы добиться нужной производительности, нам приходится лезть во внутренности сервера баз данных.

В докладе мы поговорим о практических подходах к анализу перформанса SQL Server: профилировании и Extended Events, чтении планов выполнения и о том, о каких фичах SQL Server не стоит забывать в борьбе за производительность.</Description>
  <SlidesUrl>http://www.slideshare.net/SpbDotNet/sql-server-performance-101</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=wSDMM6w-xVg</VideoUrl>
</Talk>
<Talk>
  <Id>Structured-logging</Id>
  <SpeakerIds>
    <SpeakerId>Anatoly-Kulakov</SpeakerId>
  </SpeakerIds>
  <Title>Structured logging</Title>
  <Description>Доклад рассказывает о том, как превратить кучу текстовых логов в полноценную Event Source систему. А каждому разработчику дать почувствовать себя всемогущим аналитиком. Всё это возможно благодаря структурному логированию (Structured logging), которое привносит в ваши логи семантическую составляющую. Так же будут рассмотрены основные проблемы стека ELK (Elasticsearch, Logstash, Kibana). Мы попробуем решить эти концептуальные проблемы с помощью структурного логирования. Мы так же рассмотрим как работать со структурными логами в .NET с помощью библиотеки Serilog. Решим несколько практических задач с помощью подручных средств, которые без семантики журнала были бы не подъёмны. Разберёмся со специализированным сервером Seq. И конечно же найдём пути быстрой и безболезненной миграции существующих приложений на этот чудо-стек.</Description>
  <CodeUrl>https://github.com/AnatolyKulakov/Samples/tree/spbdotnet/StructuredLogging/Demo</CodeUrl>
  <SlidesUrl>http://www.slideshare.net/yu5k3/structured-logging</SlidesUrl>
  <VideoUrl>http://www.youtube.com/watch?v=f0UGDHT7ZwY</VideoUrl>
</Talk>
<Talk>
  <Id>Swagger</Id>
  <SpeakerIds>
    <SpeakerId>Pavel-Fedotovsky</SpeakerId>
  </SpeakerIds>
  <Title>Документация REST API c использованием Swagger</Title>
  <Description>Документация является важной составляющей REST API – чем она удобнее и понятнее, тем меньше времени тратят разработчики, использующие ваше API. Хорошая документация упрощает жизнь всем – разработчикам/тестерам/клиентам. В докладе Павел расскажет про его опыт работы со Swagger – популярным подходом к спецификации REST API:
- про Сode First и Design First подходы к документации, какой лучше использовать в вашем случае;
- как сгенерировать документацию из ваших ASP.NET (Core) проектов;
- как сгенерировать код клиента/сервера по Swagger спецификации;
- где лучше всего хранить документацию;
- какие подводные камни вас могут подстерегать при работе со Swagger.</Description>
  <SlidesUrl>https://www.slideshare.net/SpbDotNet/rest-api-c-swagger</SlidesUrl>
</Talk>
<Talk>
  <Id>Theory-of-AppSec-Net</Id>
  <SpeakerIds>
    <SpeakerId>Vladimir-Kochetkov</SpeakerId>
  </SpeakerIds>
  <Title>Теория Application Security .NET</Title>
  <Description>Доклад посвящен теоретическому минимуму, которым необходимо овладеть для разработки защищенного кода .NET. Будут рассмотрены основные понятия предметной области AppSec (Application Security) и предложена классификация, позволяющая описывать их в более понятной и привычной для разработчиков форме. На базе этого, будет описана методика разработки и оценки защищенного кода, не требующая экспертных знаний в области ИБ. Применение методики будет продемонстрировано на основе уязвимостей к атакам класса инъекций (SQL/HTML/XML/XQuery/XPath Injection, Path Traversal, XXE и т.п).</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/an-exceptionally-simple-theory-of-appsec-net</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=-rQ3B5p5dUs</VideoUrl>
</Talk>
<Talk>
  <Id>UI-Automation-Tests</Id>
  <SpeakerIds>
    <SpeakerId>Roman-Iovlev</SpeakerId>
  </SpeakerIds>
  <Title>Open Source UI Automation Tests on C#</Title>
  <Description>Качественный продукт в современном мире, это необходимость и важное конкурентное преимущество. Основную долю продуктов сейчас составляют различные сайты и веб приложения. Чтобы обеспечить высокий уровень их качества и при этом сэкономить деньги, используется автоматизация UI. О том, какие есть подходы в этой сфере и какие инструменты позволяют сделать процесс быстрым, обеспечить высокий уровень качества и при этом получить удовольствие от процесса, и будет рассказывать Роман.</Description>
  <SlidesUrl>https://www.slideshare.net/SpbDotNet/open-source-ui-automation-tests-on-c</SlidesUrl>
</Talk>
<Talk>
  <Id>Using-Apache-Cordova</Id>
  <SpeakerIds>
    <SpeakerId>Anton-Shabanov</SpeakerId>
  </SpeakerIds>
  <Title>Использование Apache Cordova в реальном проекте</Title>
  <Description>Доклад будет о впечатлениях C#-веб-программиста от кроссплатформенной мобильной разработки с применением Visual Studio tools for Apache Cordova. Я расскажу немного о самой платформе Apache Cordova и ее преимуществах и недостатках, а также покажу какую работу проделал MS чтобы адаптировать процесс разработки JS-приложений для смартфонов к использованию в Visual Studio.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/visual-studio-tools-for-apache-cordova-56315452</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=Qwyn_x79rHc</VideoUrl>
</Talk>
<Talk>
  <Id>Using-static-analyzers</Id>
  <SpeakerIds>
    <SpeakerId>Valery-Ignatyev</SpeakerId>
  </SpeakerIds>
  <Title>Сценарии использования статического анализатора</Title>
  <Description></Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/ss-60641619</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=k9zjmg7spEA</VideoUrl>
</Talk>
<Talk>
  <Id>UWP-life</Id>
  <SpeakerIds>
    <SpeakerId>Nikita-Kamensky</SpeakerId>
  </SpeakerIds>
  <Title>Есть ли жизнь с UWP?</Title>
  <Description>Никита расскажет о том, что такое UWP. Как платформа развивается, как современный банк разрабатывает приложения с её помощью и поддерживает различные их версии. А также мы узнаем, как необходимо реагировать на шутки от коллег.</Description>
</Talk>
<Talk>
  <Id>VM-via-F</Id>
  <SpeakerIds>
    <SpeakerId>Yuri-Volkov</SpeakerId>
  </SpeakerIds>
  <Title>VM via F#</Title>
  <Description>Рассмотрим принципы устройства всеми любимой CLR, а также подумаем, как реализовать схожую работу на функционально-направленном F#.</Description>
  <SlidesUrl>https://www.slideshare.net/SpbDotNet/vm-via-f</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=mtYAry42MkU</VideoUrl>
</Talk>
<Talk>
  <Id>Web-security</Id>
  <SpeakerIds>
    <SpeakerId>Mikhail-Shcherbakov</SpeakerId>
  </SpeakerIds>
  <Title>Разрушители легенд: web-безопасность</Title>
  <Description>Такого выпуска не хватало на Discovery, так сделаем его вместе! Поговорим про интересные атаки и уязвимости в web-приложениях. Обсуждать будем НЕ банальные: «Linux безопаснее Windows», «Антивирус защищает от всех угроз» и т.д., а вполне конкретные технологии и атаки на них: HTTPS, XSS, XML Injection, использование криптографии с использованием примеров .NET приложений.

Михаил покажет несколько демо развенчивающие мифы ИБ, которые он не раз слышал от web-программистов. Материал будет интересен в первую очередь разработчикам, пишущим защищенные web-приложения. Если у вас тоже есть чем поделиться, приносите ноутбук с демонстрацией «своего» мифа, разберём вместе.</Description>
  <SlidesUrl>https://www.slideshare.net/yu5k3/mythbusters-web-application-security</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=MEKTiaeBzlo</VideoUrl>
</Talk>
<Talk>
  <Id>Web-Single-Sign-On-in-10-lines</Id>
  <SpeakerIds>
    <SpeakerId>Vyacheslav-Mikhaylov</SpeakerId>
  </SpeakerIds>
  <Title>Как сделать Single Sign-On в веб-приложении в 10 строк кода</Title>
  <Description>В докладе речь пойдёт о том, какие выбрать механизмы аутентификации и авторизации в приложении. Вячеслав поделится опытом использования IdentityServer и продемонстрирует способы его применения.</Description>
  <SlidesUrl>https://www.slideshare.net/yuliafast/single-signon-10</SlidesUrl>
</Talk>
<Talk>
  <Id>WinDbg-and-friends</Id>
  <SpeakerIds>
    <SpeakerId>Mikhail-Shcherbakov</SpeakerId>
  </SpeakerIds>
  <Title>WinDbg и сотоварищи</Title>
  <Description>Поговорим о самом мощном отладчике для Windows – WinDbg. Разберем как начать использовать этот отладчик, чем он может быть полезен для.NET разработчиков. Подробней остановимся на практических моментах его применения, зачем он прикладным программистам, web-разработчикам. Посмотрим и на другие инструменты отладки, которые занимают нишу между интуитивно управляемым комбайном Visual Studio и легким, но крайне аскетичным WinDbg.</Description>
  <SlidesUrl>https://www.slideshare.net/yu5k3/windbg-65001941</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=0gH0q9gA0dc</VideoUrl>
</Talk>
<Talk>
  <Id>Windows-Containers</Id>
  <SpeakerIds>
    <SpeakerId>Alexander-Shapoval</SpeakerId>
  </SpeakerIds>
  <Title>Контейнеры Windows в Microsoft Azure и on-premise</Title>
  <Description>Александр расскажет про механизмы контейнеризации в Windows.</Description>
  <SlidesUrl>http://www.slideshare.net/SpbDotNet/windows-microsoft-azure-onpremise</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=XVVBFgL0-ds</VideoUrl>
</Talk>
<Talk>
  <Id>WTF-is-Service-Fabric</Id>
  <SpeakerIds>
    <SpeakerId>Nikita-Kozlov</SpeakerId>
    <SpeakerId>Ivan-Pashchenko</SpeakerId>
  </SpeakerIds>
  <Title>WTF is Service Fabric</Title>
  <Description>Наш доклад про Microsoft Azure Service Fabric - облачную платформу, временами позволяющую легко разворачивать, скалировать и мониторить Ваши приложения.

Service Fabric - весьма свежее решение, увидевшее свет в начале 2016 года. Однако Microsoft использует платформу с 2010 года, в частности для таких облачных сервисов, как: Skype for Business, Cortana, Azure SQL.</Description>
  <SlidesUrl>http://www.slideshare.net/SpbDotNet/wtf-is-service-fabric</SlidesUrl>
</Talk>
<Talk>
  <Id>Xamarin-mobile-apps</Id>
  <SpeakerIds>
    <SpeakerId>Vsevolod-Ivanov</SpeakerId>
  </SpeakerIds>
  <Title>Разработка мобильных приложений на С# с использованием Xamarin</Title>
  <Description>В этом докладе мы поговорим про кросс-платформенную разработку мобильных приложений на платформе Xamarin.</Description>
  <SlidesUrl>http://www.slideshare.net/yu5k3/xamarin-52144250</SlidesUrl>
  <VideoUrl>https://www.youtube.com/watch?v=_5qBAL5K6ls</VideoUrl>
</Talk>
</Talks>